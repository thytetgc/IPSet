#!/bin/bash
	clear
     dir="Diretorio Atual		 : `pwd`"
	 hostname="Hostname			 : `hostname --fqdn`"
	 ip="IP						 : `wget -qO - icanhazip.com`"
	 #ip="IP					 : `ifconfig | awk 'NR>=2 && NR<=2' | awk '{print $3}'`"
     versaoso="Versao S.O.		 : `lsb_release -d | cut -d : -f 2- | sed 's/^[ \t]*//;s/[ \t]*$//'`"
	 release="Release			 : `lsb_release -r | cut -d : -f 2- | sed 's/^[ \t]*//;s/[ \t]*$//'`"
	 codename="Codename			 : `lsb_release -c | cut -d : -f 2- | sed 's/^[ \t]*//;s/[ \t]*$//'`"
	 kernel="Kernel				 : `uname -r`"
	 arquitetura="Arquitetura	 : `uname -m`"
	 echo
     echo "+-------------------------------------------------+"
     echo "|           Utilitario para IPSet                 |"
     echo "+-------------------------------------------------+"
     echo "| Escrito por:                                    |"
     echo "| Thiago Castro - www.hostlp.cloud                |"
     echo "+-------------------------------------------------+"
     echo
     echo $dir
	 echo "+-------------------------------------------------+"
	 echo $hostname
	 echo "+-------------------------------------------------+"
	 echo $ip
	 echo "+-------------------------------------------------+"
	 echo $versaoso
	 echo "+-------------------------------------------------+"
	 echo $release
	 echo "+-------------------------------------------------+"
	 echo $codename
	 echo "+-------------------------------------------------+"
     echo $kernel
	 echo "+-------------------------------------------------+"
     echo $arquitetura
	 echo "+-------------------------------------------------+"
	 echo
	 #echo "Aperte <ENTER> para continuar e comeÃ§ar..."
	 #read 
	 sleep 3
	 echo
	 echo "==================EXECUTANDO======================="
	 echo

#echo "Verificando componentes"
#mkdir -p /etc/ipset-blacklist > /dev/null 2>&1
#yes | sudo apt install ipset iptables netfilter-persistent ipset-persistent iptables-persistent > /dev/null 2>&1
#sudo systemctl enable netfilter-persistent > /dev/null 2>&1
#sudo systemctl restart netfilter-persistent > /dev/null 2>&1
         echo "+-------------------------------------------------+OK"
###########################################################################################
COUNTRIES=(cn ru in)
for country in "${COUNTRIES[@]}";
        do

echo "Limpando a lista - ${country}"

iptables -D INPUT -m set --match-set geoip-$country src -j DROP > /dev/null 2>&1
iptables -D OUTPUT -m set --match-set geoip-$country src -j DROP > /dev/null 2>&1
iptables -D FORWARD -m set --match-set geoip-$country src -j DROP > /dev/null 2>&1

ipset flush geoip-$country
ipset destroy geoip-$country > /dev/null 2>&1
ipset create geoip-$country -exist hash:net family inet hashsize 16384 maxelem 65536 > /dev/null 2>&1

echo "Download da lista - ${country}"

for IP in $(wget -q -O - http://www.ipdeny.com/ipblocks/data/countries/$country.zone)
        do
ipset add geoip-$country $IP
    done

echo "Aplicando lista - ${country}"

iptables -I INPUT -m set --match-set geoip-$country src -j DROP
iptables -I OUTPUT -m set --match-set geoip-$country src -j DROP
iptables -I FORWARD -m set --match-set geoip-$country src -j DROP
         echo "+-------------------------------------------------+OK"
done

###########################################################################################
COUNTRIES=(br)
for country in "${COUNTRIES[@]}";
        do

echo "Limpando a lista - ${country}"

#iptables -D INPUT -m set --match-set geoip-$country src -j ACCEPT > /dev/null 2>&1
#iptables -D OUTPUT -m set --match-set geoip-$country src -j ACCEPT > /dev/null 2>&1
#iptables -D FORWARD -m set --match-set geoip-$country src -j ACCEPT > /dev/null 2>&1

ipset flush geoip-$country
ipset destroy geoip-$country > /dev/null 2>&1
ipset create geoip-$country -exist hash:net family inet hashsize 16384 maxelem 65536 > /dev/null 2>&1

echo "Download da lista - ${country}"

for IP in $(wget -q -O - http://www.ipdeny.com/ipblocks/data/countries/$country.zone)
        do
ipset add geoip-$country $IP
    done

echo "Aplicando lista - ${country}"

#iptables -I INPUT -m set --match-set geoip-$country src -j ACCEPT
#iptables -I OUTPUT -m set --match-set geoip-$country src -j ACCEPT
#iptables -I FORWARD -m set --match-set geoip-$country src -j ACCEPT
         echo "+-------------------------------------------------+OK"
done

###########################################################################################
LIST=(blacklist)

for lists in "${LIST[@]}";
        do

echo "Limpando a lista - ${lists}"

iptables -D INPUT -m set --match-set geoip-$lists src -j DROP > /dev/null 2>&1
iptables -D OUTPUT -m set --match-set geoip-$lists src -j DROP > /dev/null 2>&1
iptables -D FORWARD -m set --match-set geoip-$lists src -j DROP > /dev/null 2>&1

ipset flush geoip-$lists
ipset destroy geoip-$lists > /dev/null 2>&1
ipset create geoip-$lists -exist hash:net family inet hashsize 16384 maxelem 65536 > /dev/null 2>&1

echo "Download da lista - ${lists}"

BLACKLISTS=(
        "https://www.projecthoneypot.org/list_of_ips.php?t=d&rss=1"                                # Project Honey Pot Directory of Dictionary Attacker IPs
        "https://check.torproject.org/cgi-bin/TorBulkExitList.py?ip=1.1.1.1"                       # TOR Exit Nodes
        "https://www.maxmind.com/en/high-risk-ip-sample-list"                                      # MaxMind GeoIP Anonymous Proxies
        "https://danger.rulez.sk/projects/bruteforceblocker/blist.php"                             # BruteForceBlocker IP List
        "https://www.spamhaus.org/drop/drop.lasso"                                                 # Spamhaus Don't Route Or Peer List (DROP)
        "https://cinsscore.com/list/ci-badguys.txt"                                                # C.I. Army Malicious IP List
        "https://lists.blocklist.de/lists/all.txt"                                                 # blocklist.de attackers
        "https://blocklist.greensnow.co/greensnow.txt"                                             # GreenSnow
        "https://iplists.firehol.org/files/firehol_level1.netset"  								   # Firehol Level 1
        "https://iplists.firehol.org/files/stopforumspam_7d.ipset" 								   # Stopforumspam via Firehol
)

IP_BLACKLIST_TMP=$(mktemp)
for i in "${BLACKLISTS[@]}"; do
        IP_TMP=$(mktemp)
        ((HTTP_RC = $(curl -L --connect-timeout 10 --max-time 10 -o "$IP_TMP" -s -w "%{http_code}" "$i")))
        if ((HTTP_RC == 200 || HTTP_RC == 302 || HTTP_RC == 0)); then # "0" because file:/// returns 000
                command grep -Po '^(?:\d{1,3}\.){3}\d{1,3}(?:/\d{1,2})?' "$IP_TMP" | sed -r 's/^0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+)$/\1.\2.\3.\4/' >> "$IP_BLACKLIST_TMP"
        elif ((HTTP_RC == 503)); then
                echo >&2 -e "\\nUnavailable (${HTTP_RC}): $i"
        else
                echo >&2 -e "\\nWarning: curl returned HTTP response code $HTTP_RC for URL $i"
        fi
        rm -f "$IP_TMP"
done

sed -r -e '/^(0\.0\.0\.0|10\.|127\.|172\.1[6-9]\.|172\.2[0-9]\.|172\.3[0-1]\.|192\.168\.|22[4-9]\.|23[0-9]\.)/d' "$IP_BLACKLIST_TMP" | sort -n | sort -mu  > /dev/null 2>&1
#cp "$IP_BLACKLIST_TMP" blacklist.ipset
#rm -f "$IP_BLACKLIST_TMP"

for IP in $(`cat "$IP_BLACKLIST_TMP"` > /dev/null 2>&1)
        do
ipset add geoip-$lists $IP
	done

echo "Aplicando lista - ${lists}"

iptables -I INPUT -m set --match-set geoip-$lists src -j DROP
iptables -I OUTPUT -m set --match-set geoip-$lists src -j DROP
iptables -I FORWARD -m set --match-set geoip-$lists src -j DROP
         echo "+-------------------------------------------------+OK"
done

echo
echo "Salvando Iptables e IPset"
#yes | sudo dpkg-reconfigure ipset-persistent > /dev/null 2>&1
sudo netfilter-persistent save > /dev/null 2>&1
         echo "+-------------------------------------------------+OK"

###########################################################################################
